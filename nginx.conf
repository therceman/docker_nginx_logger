worker_processes auto;
pid /run/nginx.pid;

events {
    worker_connections 768;
}

http {
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    gzip on;
    gzip_disable "msie6";

    log_format bodylog '==================================================\n [$time_iso8601] $remote_addr '
    '"$request" $status "$http_referer" "$http_user_agent"'
    '\n---- Headers ----\n"$req_headers"\n---- Request ----\n"$req_body"\n---- Response ----\n"$resp_body"';


    server {
        listen       80;
        listen  [::]:80;
        server_name  localhost;

        access_log  /var/log/nginx/index.html bodylog;

        location / {
        	root   /var/log/nginx;
		    index  index.html index.htm;
        }

        lua_need_request_body on;

        set $resp_body "";
        set $req_body "";
        set $req_headers "";

        client_body_buffer_size 16k;
        client_max_body_size 16k;

        rewrite_by_lua_block {
            local req_headers = "";
            ngx.var.req_body = ngx.req.get_body_data();
            local h, err = ngx.req.get_headers()
            for k, v in pairs(h) do
                req_headers = req_headers .. k .. ': ' .. v .. '\n';
            end

            ngx.var.req_headers = req_headers;
        }

        body_filter_by_lua '
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
        end
        ';
     }
}
